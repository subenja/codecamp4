const { main } = require("./main");

describe("ให้อาร์เรย์เป็นพารามิเตอร์ตัวแรก และพารามิเตอร์ตั้งแต่ตัวที่สองเป็นต้นไป คือตัวที่ต้องกำจัดทิ้งจากอาร์เรย์ เช่น ให้ ([2,3], 3) ควรคืนค่าอาร์เรย์ที่มีแต่ [2] เพราะ 3 ถูกกำจัด ", () => {
  test("ให้อาร์เรย์ [1, 2, 3, 1, 2, 3] ตัวที่กำจัดทิ้งคือ 2, 3 ควรคืนค่า [ 1, 1 ]", () => {
    expect(main([1, 2, 3, 1, 2, 3], 2, 3)).toEqual([1, 1]);
  });
  test("ให้อาร์เรย์ [4, 3, 9] ตัวที่กำจัดทิ้งคือ 4 ควรคืนค่า [ 3, 9 ]", () => {
    expect(main([4, 3, 9], 4)).toEqual([3, 9]);
  });
  test("ให้อาร์เรย์ [1, 9, 0, 9, 4, 8, 0, 5] ตัวที่กำจัดทิ้งคือ 8, 5, 0, 9 ควรคืนค่า [ 1, 4 ]", () => {
    expect(main([1, 9, 0, 9, 4, 8, 0, 5], 8, 5, 0, 9)).toEqual([1, 4]);
  });
  test("ให้อาร์เรย์ [3, 4, 2, 1, 0] ตัวที่กำจัดทิ้งคือ 2, 1, 0 ควรคืนค่า [ 1, 1 ]", () => {
    expect(main([3, 4, 2, 1, 0], 2, 1, 0)).toEqual([3, 4]);
  });
  test("ให้อาร์เรย์ [3, 9, 3, 6, 5, 9, 5, 7, 2, 7, 1, 7, 6, 9, 8, 9, 1, 6, 7] ตัวที่กำจัดทิ้งคือ 5, 3 ควรคืนค่า [9, 6, 9, 7, 2, 7, 1, 7, 6, 9, 8, 9, 1, 6, 7]", () => {
    expect(
      main([3, 9, 3, 6, 5, 9, 5, 7, 2, 7, 1, 7, 6, 9, 8, 9, 1, 6, 7], 5, 3)
    ).toEqual([9, 6, 9, 7, 2, 7, 1, 7, 6, 9, 8, 9, 1, 6, 7]);
  });
});
